// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TouchDeviceManager
import CoreBluetooth
import Foundation
import Swift
@_exported import TouchDeviceManager
import UIKit
import _Concurrency
@objc public class ECGTD4257Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.ECGInfo
  public var getResult: ((TouchDeviceManager.ECGTD4257Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.ECGTD4257Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.ECGTD4257Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public struct GlucoseInfo {
  public let glucose: Swift.Int
  public init(glucose: Swift.Int)
}
public typealias ResultClosure<T> = ((T) -> ())
public enum MultiMonitoringBeneCheckType : Swift.Int {
  case glucose
  case uric
  case cholesterol
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MultiMonitoringBeneCheckDevice : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.MultiMonitoringBeneCheckInfo
  public var getResult: ((TouchDeviceManager.MultiMonitoringBeneCheckDevice.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.MultiMonitoringBeneCheckDevice : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.MultiMonitoringBeneCheckDevice : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@objc public class OximeterADFB05Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.OximeterInfo
  public var getResult: ((TouchDeviceManager.OximeterADFB05Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.OximeterADFB05Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.OximeterADFB05Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public struct MultiMonitoringBeneCheckInfo {
  public let type: TouchDeviceManager.MultiMonitoringBeneCheckType
  public let value: Swift.Int
  public init(type: TouchDeviceManager.MultiMonitoringBeneCheckType, value: Swift.Int)
}
public struct OximeterInfo {
  public let oxygen: Swift.Int
  public let bpm: Swift.Int
  public init(oxygen: Swift.Int, bpm: Swift.Int)
}
@objc public class BloodPressureTD3140Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.BloodPressureInfo
  public var getResult: ((TouchDeviceManager.BloodPressureTD3140Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool, repeatResult: Swift.Bool)
  public func startScan()
  public func start()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.BloodPressureTD3140Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.BloodPressureTD3140Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public enum BodyCompositionADFB885TDeviceHeader : Swift.String {
  case header_00
  case header_01
  case header_41
  case header_42
  case header_81
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BodyCompositionADFB885TDeviceGender : Swift.Int {
  case female
  case male
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class BodyCompositionADFB885TDevice : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.BodyCompositionInfo
  public var getResult: ((TouchDeviceManager.BodyCompositionADFB885TDevice.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool, height: Swift.Int, age: Swift.Int, gender: TouchDeviceManager.BodyCompositionADFB885TDeviceGender)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.BodyCompositionADFB885TDevice : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.BodyCompositionADFB885TDevice : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@objc public class OximeterTD8255Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.OximeterInfo
  public var getResult: ((TouchDeviceManager.OximeterTD8255Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func requestPayload()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.OximeterTD8255Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.OximeterTD8255Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@objc public class TemperatureAOJ20ADevice : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.TemperatureInfo
  public var getResult: ((TouchDeviceManager.TemperatureAOJ20ADevice.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.TemperatureAOJ20ADevice : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.TemperatureAOJ20ADevice : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@objc public class TemperatureTD1241Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.TemperatureInfo
  public var getResult: ((TouchDeviceManager.TemperatureTD1241Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.TemperatureTD1241Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.TemperatureTD1241Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public struct BodyCompositionInfo {
  public let weight: Swift.Double
  public let fat: Swift.Double
  public let bone: Swift.Double
  public let water: Swift.Double
  public let muscle: Swift.Double
  public let bmi: Swift.Double
  public init(weight: Swift.Double, fat: Swift.Double, bone: Swift.Double, water: Swift.Double, muscle: Swift.Double, bmi: Swift.Double)
}
public struct TemperatureInfo {
  public let temperature: Swift.String
  public init(temperature: Swift.String)
}
@objc public class GlucoseTD4257Device : ObjectiveC.NSObject {
  public typealias BaseValue = TouchDeviceManager.GlucoseInfo
  public var getResult: ((TouchDeviceManager.GlucoseTD4257Device.BaseValue) -> ())?
  public var stateConnection: ((TouchDeviceManager.StateDeviceConnection) -> ())?
  public var stateLoading: ((TouchDeviceManager.StateDeviceLoading) -> ())?
  public var stateCentralManager: ((CoreBluetooth.CBManagerState) -> ())?
  public init(autoResult: Swift.Bool)
  public func startScan()
  public func stopScan()
  public func disconnect()
  public func requestResult()
  @objc deinit
}
extension TouchDeviceManager.GlucoseTD4257Device : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension TouchDeviceManager.GlucoseTD4257Device : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public enum StateDeviceLoading {
  case loading
  case success
  case error(Swift.String)
}
public enum StateDeviceConnection {
  case connect
  case disconnect
  public static func == (a: TouchDeviceManager.StateDeviceConnection, b: TouchDeviceManager.StateDeviceConnection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ECGInfo {
  public let graph: [Swift.Int]
  public let pulse: Swift.String
  public init(graph: [Swift.Int], pulse: Swift.String)
}
public struct BloodPressureInfo {
  public let pluse: Swift.Int
  public let sys: Swift.Int
  public let dia: Swift.Int
  public init(pluse: Swift.Int, sys: Swift.Int, dia: Swift.Int)
}
extension TouchDeviceManager.MultiMonitoringBeneCheckType : Swift.Equatable {}
extension TouchDeviceManager.MultiMonitoringBeneCheckType : Swift.Hashable {}
extension TouchDeviceManager.MultiMonitoringBeneCheckType : Swift.RawRepresentable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceHeader : Swift.Equatable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceHeader : Swift.Hashable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceHeader : Swift.RawRepresentable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceGender : Swift.Equatable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceGender : Swift.Hashable {}
extension TouchDeviceManager.BodyCompositionADFB885TDeviceGender : Swift.RawRepresentable {}
extension TouchDeviceManager.StateDeviceConnection : Swift.Equatable {}
extension TouchDeviceManager.StateDeviceConnection : Swift.Hashable {}
